- Status of old todos:
  - Code on GitHub, rjs was able to build
  - bg sent survey paper, rjs read it
  - bg typed up some notes on his idea, and sent it out

- Things that make this project different from H20
  - Row vs Column store distinction doesn't exist
    for graph dbs
  - The fact that this is an interaction graph let's 
    you change how differnt blocks are stored for
    different time intervals.
 
- Idea:
  - Initially, all blocks are big: contain all the data.
  - Over time, we split it up, but we need to keep pointers
    to sibling blocks that contain the attributes

- Maybe we could also play with replication?
  - We could split a block, 
  - there are two blocks. Each block might have an overlapping 
  set of attributes
  - at the cost of additional storage, we could avoid visiting 
  both blocks
  - Example: (a | bc) vs ( ab | bc ). For queries that access ab 
    attributes, use the first block. Queries that access bc attrbutes
    use the second block.

- TODO items:
  1. Write the description a bit more formally
  2. Work through a concrete example: 
    - a database and a couple of queries that would change 
      how the layout would be
  3. Clarify how would the adaptation works
    - when to adapt?
    - is it a fixed period?
    - when do you adapt? after how many queries?
  4. Develop a cost model: decide what would be a good splitting
    - i.e., when do we move attributes to a different block
    - keep a link to the siblings so you could still traverse them

- Robert will begin writing these things up, and put the latex
  in the repository. We can iterate together on this until the
  next meeting.



