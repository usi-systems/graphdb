

We want to define a graph traversal language:

XQuery - tree based

Looking for semantic inclusion:

Semantic equivalance:

- static analysis w/o the graph at hand
- Determine if a query is a subset of another query
- Use results that can cache, or cojoin them.

- Two componenets:
- Language for graph that can come up with common graph computations
  - triangle, page rank, etc.
- Having come up with the language, ensure that there is a subset inclusion

- Quicly do a search for graph languages
  - 


Here is a recent, short survey on graph traversal languages:
http://users.dcc.uchile.cl/~pbarcelo/wood.pdf

I think we may want to design a language around "regular tree grammars":
http://en.wikipedia.org/wiki/Regular_tree_language

For a regular tree language, it is decidable if one language is a subset of another.

We may also want to look at "tree walking automataons":
http://en.wikipedia.org/wiki/Tree_walking_automaton

These were originally used by Aho & Ullman to do language translations:
http://dl.acm.org/citation.cfm?id=805425

Alex Aiken has an older paper on "Implementing Regular Tree Expressions":
http://theory.stanford.edu/~aiken/publications/papers/fpca91.ps

Some of his work led to applications in type analysis, such as in Haskell:
http://en.wikipedia.org/wiki/Pattern_matching#Tree_patterns

There is a textbook on Tree Automata:
TATA: Tree Automata Techniques and Applications
http://tata.gforge.inria.fr

Some things we might want to start with:

XQuery:
http://www.w3.org/XML/Query/

SparQL:
http://www.w3.org/TR/rdf-sparql-query/

Note that there is a SparQL plugin for neo4j which lets you use
neo4j as a triple store.

I did not know what a triple store was. From wikipedia:

http://en.wikipedia.org/wiki/Triplestore
a triple being a data entity composed of subject-predicate-object, like "Bob is 35" or "Bob knows Fred".

These are used for Semantic web type work, and RDFs:
http://en.wikipedia.org/wiki/Resource_Description_Framework
which stores entities and relations, (I think)




